
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model FormSubmission
 * 
 */
export type FormSubmission = $Result.DefaultSelection<Prisma.$FormSubmissionPayload>
/**
 * Model ValidationLog
 * 
 */
export type ValidationLog = $Result.DefaultSelection<Prisma.$ValidationLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const FormStatus: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  UNDER_REVIEW: 'UNDER_REVIEW'
};

export type FormStatus = (typeof FormStatus)[keyof typeof FormStatus]

}

export type FormStatus = $Enums.FormStatus

export const FormStatus: typeof $Enums.FormStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more FormSubmissions
 * const formSubmissions = await prisma.formSubmission.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more FormSubmissions
   * const formSubmissions = await prisma.formSubmission.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.formSubmission`: Exposes CRUD operations for the **FormSubmission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FormSubmissions
    * const formSubmissions = await prisma.formSubmission.findMany()
    * ```
    */
  get formSubmission(): Prisma.FormSubmissionDelegate<ExtArgs>;

  /**
   * `prisma.validationLog`: Exposes CRUD operations for the **ValidationLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ValidationLogs
    * const validationLogs = await prisma.validationLog.findMany()
    * ```
    */
  get validationLog(): Prisma.ValidationLogDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    FormSubmission: 'FormSubmission',
    ValidationLog: 'ValidationLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "formSubmission" | "validationLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      FormSubmission: {
        payload: Prisma.$FormSubmissionPayload<ExtArgs>
        fields: Prisma.FormSubmissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FormSubmissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormSubmissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FormSubmissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormSubmissionPayload>
          }
          findFirst: {
            args: Prisma.FormSubmissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormSubmissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FormSubmissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormSubmissionPayload>
          }
          findMany: {
            args: Prisma.FormSubmissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormSubmissionPayload>[]
          }
          create: {
            args: Prisma.FormSubmissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormSubmissionPayload>
          }
          createMany: {
            args: Prisma.FormSubmissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FormSubmissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormSubmissionPayload>[]
          }
          delete: {
            args: Prisma.FormSubmissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormSubmissionPayload>
          }
          update: {
            args: Prisma.FormSubmissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormSubmissionPayload>
          }
          deleteMany: {
            args: Prisma.FormSubmissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FormSubmissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FormSubmissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormSubmissionPayload>
          }
          aggregate: {
            args: Prisma.FormSubmissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFormSubmission>
          }
          groupBy: {
            args: Prisma.FormSubmissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<FormSubmissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.FormSubmissionCountArgs<ExtArgs>
            result: $Utils.Optional<FormSubmissionCountAggregateOutputType> | number
          }
        }
      }
      ValidationLog: {
        payload: Prisma.$ValidationLogPayload<ExtArgs>
        fields: Prisma.ValidationLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ValidationLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ValidationLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationLogPayload>
          }
          findFirst: {
            args: Prisma.ValidationLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ValidationLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationLogPayload>
          }
          findMany: {
            args: Prisma.ValidationLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationLogPayload>[]
          }
          create: {
            args: Prisma.ValidationLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationLogPayload>
          }
          createMany: {
            args: Prisma.ValidationLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ValidationLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationLogPayload>[]
          }
          delete: {
            args: Prisma.ValidationLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationLogPayload>
          }
          update: {
            args: Prisma.ValidationLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationLogPayload>
          }
          deleteMany: {
            args: Prisma.ValidationLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ValidationLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ValidationLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationLogPayload>
          }
          aggregate: {
            args: Prisma.ValidationLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateValidationLog>
          }
          groupBy: {
            args: Prisma.ValidationLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<ValidationLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.ValidationLogCountArgs<ExtArgs>
            result: $Utils.Optional<ValidationLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type FormSubmissionCountOutputType
   */

  export type FormSubmissionCountOutputType = {
    validationLogs: number
  }

  export type FormSubmissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    validationLogs?: boolean | FormSubmissionCountOutputTypeCountValidationLogsArgs
  }

  // Custom InputTypes
  /**
   * FormSubmissionCountOutputType without action
   */
  export type FormSubmissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSubmissionCountOutputType
     */
    select?: FormSubmissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FormSubmissionCountOutputType without action
   */
  export type FormSubmissionCountOutputTypeCountValidationLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ValidationLogWhereInput
  }


  /**
   * Models
   */

  /**
   * Model FormSubmission
   */

  export type AggregateFormSubmission = {
    _count: FormSubmissionCountAggregateOutputType | null
    _min: FormSubmissionMinAggregateOutputType | null
    _max: FormSubmissionMaxAggregateOutputType | null
  }

  export type FormSubmissionMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    aadhaarNumber: string | null
    mobileNumber: string | null
    emailAddress: string | null
    otpVerified: boolean | null
    panNumber: string | null
    businessName: string | null
    businessType: string | null
    addressLine1: string | null
    addressLine2: string | null
    city: string | null
    state: string | null
    pincode: string | null
    status: $Enums.FormStatus | null
    notes: string | null
  }

  export type FormSubmissionMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    aadhaarNumber: string | null
    mobileNumber: string | null
    emailAddress: string | null
    otpVerified: boolean | null
    panNumber: string | null
    businessName: string | null
    businessType: string | null
    addressLine1: string | null
    addressLine2: string | null
    city: string | null
    state: string | null
    pincode: string | null
    status: $Enums.FormStatus | null
    notes: string | null
  }

  export type FormSubmissionCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    aadhaarNumber: number
    mobileNumber: number
    emailAddress: number
    otpVerified: number
    panNumber: number
    businessName: number
    businessType: number
    addressLine1: number
    addressLine2: number
    city: number
    state: number
    pincode: number
    status: number
    notes: number
    validationErrors: number
    _all: number
  }


  export type FormSubmissionMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    aadhaarNumber?: true
    mobileNumber?: true
    emailAddress?: true
    otpVerified?: true
    panNumber?: true
    businessName?: true
    businessType?: true
    addressLine1?: true
    addressLine2?: true
    city?: true
    state?: true
    pincode?: true
    status?: true
    notes?: true
  }

  export type FormSubmissionMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    aadhaarNumber?: true
    mobileNumber?: true
    emailAddress?: true
    otpVerified?: true
    panNumber?: true
    businessName?: true
    businessType?: true
    addressLine1?: true
    addressLine2?: true
    city?: true
    state?: true
    pincode?: true
    status?: true
    notes?: true
  }

  export type FormSubmissionCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    aadhaarNumber?: true
    mobileNumber?: true
    emailAddress?: true
    otpVerified?: true
    panNumber?: true
    businessName?: true
    businessType?: true
    addressLine1?: true
    addressLine2?: true
    city?: true
    state?: true
    pincode?: true
    status?: true
    notes?: true
    validationErrors?: true
    _all?: true
  }

  export type FormSubmissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FormSubmission to aggregate.
     */
    where?: FormSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormSubmissions to fetch.
     */
    orderBy?: FormSubmissionOrderByWithRelationInput | FormSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FormSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FormSubmissions
    **/
    _count?: true | FormSubmissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FormSubmissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FormSubmissionMaxAggregateInputType
  }

  export type GetFormSubmissionAggregateType<T extends FormSubmissionAggregateArgs> = {
        [P in keyof T & keyof AggregateFormSubmission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFormSubmission[P]>
      : GetScalarType<T[P], AggregateFormSubmission[P]>
  }




  export type FormSubmissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FormSubmissionWhereInput
    orderBy?: FormSubmissionOrderByWithAggregationInput | FormSubmissionOrderByWithAggregationInput[]
    by: FormSubmissionScalarFieldEnum[] | FormSubmissionScalarFieldEnum
    having?: FormSubmissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FormSubmissionCountAggregateInputType | true
    _min?: FormSubmissionMinAggregateInputType
    _max?: FormSubmissionMaxAggregateInputType
  }

  export type FormSubmissionGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    aadhaarNumber: string
    mobileNumber: string
    emailAddress: string
    otpVerified: boolean
    panNumber: string
    businessName: string
    businessType: string
    addressLine1: string
    addressLine2: string | null
    city: string
    state: string
    pincode: string
    status: $Enums.FormStatus
    notes: string | null
    validationErrors: JsonValue | null
    _count: FormSubmissionCountAggregateOutputType | null
    _min: FormSubmissionMinAggregateOutputType | null
    _max: FormSubmissionMaxAggregateOutputType | null
  }

  type GetFormSubmissionGroupByPayload<T extends FormSubmissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FormSubmissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FormSubmissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FormSubmissionGroupByOutputType[P]>
            : GetScalarType<T[P], FormSubmissionGroupByOutputType[P]>
        }
      >
    >


  export type FormSubmissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    aadhaarNumber?: boolean
    mobileNumber?: boolean
    emailAddress?: boolean
    otpVerified?: boolean
    panNumber?: boolean
    businessName?: boolean
    businessType?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    city?: boolean
    state?: boolean
    pincode?: boolean
    status?: boolean
    notes?: boolean
    validationErrors?: boolean
    validationLogs?: boolean | FormSubmission$validationLogsArgs<ExtArgs>
    _count?: boolean | FormSubmissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["formSubmission"]>

  export type FormSubmissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    aadhaarNumber?: boolean
    mobileNumber?: boolean
    emailAddress?: boolean
    otpVerified?: boolean
    panNumber?: boolean
    businessName?: boolean
    businessType?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    city?: boolean
    state?: boolean
    pincode?: boolean
    status?: boolean
    notes?: boolean
    validationErrors?: boolean
  }, ExtArgs["result"]["formSubmission"]>

  export type FormSubmissionSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    aadhaarNumber?: boolean
    mobileNumber?: boolean
    emailAddress?: boolean
    otpVerified?: boolean
    panNumber?: boolean
    businessName?: boolean
    businessType?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    city?: boolean
    state?: boolean
    pincode?: boolean
    status?: boolean
    notes?: boolean
    validationErrors?: boolean
  }

  export type FormSubmissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    validationLogs?: boolean | FormSubmission$validationLogsArgs<ExtArgs>
    _count?: boolean | FormSubmissionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FormSubmissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FormSubmissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FormSubmission"
    objects: {
      validationLogs: Prisma.$ValidationLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      aadhaarNumber: string
      mobileNumber: string
      emailAddress: string
      otpVerified: boolean
      panNumber: string
      businessName: string
      businessType: string
      addressLine1: string
      addressLine2: string | null
      city: string
      state: string
      pincode: string
      status: $Enums.FormStatus
      notes: string | null
      validationErrors: Prisma.JsonValue | null
    }, ExtArgs["result"]["formSubmission"]>
    composites: {}
  }

  type FormSubmissionGetPayload<S extends boolean | null | undefined | FormSubmissionDefaultArgs> = $Result.GetResult<Prisma.$FormSubmissionPayload, S>

  type FormSubmissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FormSubmissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FormSubmissionCountAggregateInputType | true
    }

  export interface FormSubmissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FormSubmission'], meta: { name: 'FormSubmission' } }
    /**
     * Find zero or one FormSubmission that matches the filter.
     * @param {FormSubmissionFindUniqueArgs} args - Arguments to find a FormSubmission
     * @example
     * // Get one FormSubmission
     * const formSubmission = await prisma.formSubmission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FormSubmissionFindUniqueArgs>(args: SelectSubset<T, FormSubmissionFindUniqueArgs<ExtArgs>>): Prisma__FormSubmissionClient<$Result.GetResult<Prisma.$FormSubmissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FormSubmission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FormSubmissionFindUniqueOrThrowArgs} args - Arguments to find a FormSubmission
     * @example
     * // Get one FormSubmission
     * const formSubmission = await prisma.formSubmission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FormSubmissionFindUniqueOrThrowArgs>(args: SelectSubset<T, FormSubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FormSubmissionClient<$Result.GetResult<Prisma.$FormSubmissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FormSubmission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormSubmissionFindFirstArgs} args - Arguments to find a FormSubmission
     * @example
     * // Get one FormSubmission
     * const formSubmission = await prisma.formSubmission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FormSubmissionFindFirstArgs>(args?: SelectSubset<T, FormSubmissionFindFirstArgs<ExtArgs>>): Prisma__FormSubmissionClient<$Result.GetResult<Prisma.$FormSubmissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FormSubmission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormSubmissionFindFirstOrThrowArgs} args - Arguments to find a FormSubmission
     * @example
     * // Get one FormSubmission
     * const formSubmission = await prisma.formSubmission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FormSubmissionFindFirstOrThrowArgs>(args?: SelectSubset<T, FormSubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__FormSubmissionClient<$Result.GetResult<Prisma.$FormSubmissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FormSubmissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormSubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FormSubmissions
     * const formSubmissions = await prisma.formSubmission.findMany()
     * 
     * // Get first 10 FormSubmissions
     * const formSubmissions = await prisma.formSubmission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const formSubmissionWithIdOnly = await prisma.formSubmission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FormSubmissionFindManyArgs>(args?: SelectSubset<T, FormSubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormSubmissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FormSubmission.
     * @param {FormSubmissionCreateArgs} args - Arguments to create a FormSubmission.
     * @example
     * // Create one FormSubmission
     * const FormSubmission = await prisma.formSubmission.create({
     *   data: {
     *     // ... data to create a FormSubmission
     *   }
     * })
     * 
     */
    create<T extends FormSubmissionCreateArgs>(args: SelectSubset<T, FormSubmissionCreateArgs<ExtArgs>>): Prisma__FormSubmissionClient<$Result.GetResult<Prisma.$FormSubmissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FormSubmissions.
     * @param {FormSubmissionCreateManyArgs} args - Arguments to create many FormSubmissions.
     * @example
     * // Create many FormSubmissions
     * const formSubmission = await prisma.formSubmission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FormSubmissionCreateManyArgs>(args?: SelectSubset<T, FormSubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FormSubmissions and returns the data saved in the database.
     * @param {FormSubmissionCreateManyAndReturnArgs} args - Arguments to create many FormSubmissions.
     * @example
     * // Create many FormSubmissions
     * const formSubmission = await prisma.formSubmission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FormSubmissions and only return the `id`
     * const formSubmissionWithIdOnly = await prisma.formSubmission.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FormSubmissionCreateManyAndReturnArgs>(args?: SelectSubset<T, FormSubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormSubmissionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FormSubmission.
     * @param {FormSubmissionDeleteArgs} args - Arguments to delete one FormSubmission.
     * @example
     * // Delete one FormSubmission
     * const FormSubmission = await prisma.formSubmission.delete({
     *   where: {
     *     // ... filter to delete one FormSubmission
     *   }
     * })
     * 
     */
    delete<T extends FormSubmissionDeleteArgs>(args: SelectSubset<T, FormSubmissionDeleteArgs<ExtArgs>>): Prisma__FormSubmissionClient<$Result.GetResult<Prisma.$FormSubmissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FormSubmission.
     * @param {FormSubmissionUpdateArgs} args - Arguments to update one FormSubmission.
     * @example
     * // Update one FormSubmission
     * const formSubmission = await prisma.formSubmission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FormSubmissionUpdateArgs>(args: SelectSubset<T, FormSubmissionUpdateArgs<ExtArgs>>): Prisma__FormSubmissionClient<$Result.GetResult<Prisma.$FormSubmissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FormSubmissions.
     * @param {FormSubmissionDeleteManyArgs} args - Arguments to filter FormSubmissions to delete.
     * @example
     * // Delete a few FormSubmissions
     * const { count } = await prisma.formSubmission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FormSubmissionDeleteManyArgs>(args?: SelectSubset<T, FormSubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FormSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormSubmissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FormSubmissions
     * const formSubmission = await prisma.formSubmission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FormSubmissionUpdateManyArgs>(args: SelectSubset<T, FormSubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FormSubmission.
     * @param {FormSubmissionUpsertArgs} args - Arguments to update or create a FormSubmission.
     * @example
     * // Update or create a FormSubmission
     * const formSubmission = await prisma.formSubmission.upsert({
     *   create: {
     *     // ... data to create a FormSubmission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FormSubmission we want to update
     *   }
     * })
     */
    upsert<T extends FormSubmissionUpsertArgs>(args: SelectSubset<T, FormSubmissionUpsertArgs<ExtArgs>>): Prisma__FormSubmissionClient<$Result.GetResult<Prisma.$FormSubmissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FormSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormSubmissionCountArgs} args - Arguments to filter FormSubmissions to count.
     * @example
     * // Count the number of FormSubmissions
     * const count = await prisma.formSubmission.count({
     *   where: {
     *     // ... the filter for the FormSubmissions we want to count
     *   }
     * })
    **/
    count<T extends FormSubmissionCountArgs>(
      args?: Subset<T, FormSubmissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FormSubmissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FormSubmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormSubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FormSubmissionAggregateArgs>(args: Subset<T, FormSubmissionAggregateArgs>): Prisma.PrismaPromise<GetFormSubmissionAggregateType<T>>

    /**
     * Group by FormSubmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormSubmissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FormSubmissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FormSubmissionGroupByArgs['orderBy'] }
        : { orderBy?: FormSubmissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FormSubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FormSubmission model
   */
  readonly fields: FormSubmissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FormSubmission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FormSubmissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    validationLogs<T extends FormSubmission$validationLogsArgs<ExtArgs> = {}>(args?: Subset<T, FormSubmission$validationLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValidationLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FormSubmission model
   */ 
  interface FormSubmissionFieldRefs {
    readonly id: FieldRef<"FormSubmission", 'String'>
    readonly createdAt: FieldRef<"FormSubmission", 'DateTime'>
    readonly updatedAt: FieldRef<"FormSubmission", 'DateTime'>
    readonly aadhaarNumber: FieldRef<"FormSubmission", 'String'>
    readonly mobileNumber: FieldRef<"FormSubmission", 'String'>
    readonly emailAddress: FieldRef<"FormSubmission", 'String'>
    readonly otpVerified: FieldRef<"FormSubmission", 'Boolean'>
    readonly panNumber: FieldRef<"FormSubmission", 'String'>
    readonly businessName: FieldRef<"FormSubmission", 'String'>
    readonly businessType: FieldRef<"FormSubmission", 'String'>
    readonly addressLine1: FieldRef<"FormSubmission", 'String'>
    readonly addressLine2: FieldRef<"FormSubmission", 'String'>
    readonly city: FieldRef<"FormSubmission", 'String'>
    readonly state: FieldRef<"FormSubmission", 'String'>
    readonly pincode: FieldRef<"FormSubmission", 'String'>
    readonly status: FieldRef<"FormSubmission", 'FormStatus'>
    readonly notes: FieldRef<"FormSubmission", 'String'>
    readonly validationErrors: FieldRef<"FormSubmission", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * FormSubmission findUnique
   */
  export type FormSubmissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSubmission
     */
    select?: FormSubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which FormSubmission to fetch.
     */
    where: FormSubmissionWhereUniqueInput
  }

  /**
   * FormSubmission findUniqueOrThrow
   */
  export type FormSubmissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSubmission
     */
    select?: FormSubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which FormSubmission to fetch.
     */
    where: FormSubmissionWhereUniqueInput
  }

  /**
   * FormSubmission findFirst
   */
  export type FormSubmissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSubmission
     */
    select?: FormSubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which FormSubmission to fetch.
     */
    where?: FormSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormSubmissions to fetch.
     */
    orderBy?: FormSubmissionOrderByWithRelationInput | FormSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FormSubmissions.
     */
    cursor?: FormSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FormSubmissions.
     */
    distinct?: FormSubmissionScalarFieldEnum | FormSubmissionScalarFieldEnum[]
  }

  /**
   * FormSubmission findFirstOrThrow
   */
  export type FormSubmissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSubmission
     */
    select?: FormSubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which FormSubmission to fetch.
     */
    where?: FormSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormSubmissions to fetch.
     */
    orderBy?: FormSubmissionOrderByWithRelationInput | FormSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FormSubmissions.
     */
    cursor?: FormSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FormSubmissions.
     */
    distinct?: FormSubmissionScalarFieldEnum | FormSubmissionScalarFieldEnum[]
  }

  /**
   * FormSubmission findMany
   */
  export type FormSubmissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSubmission
     */
    select?: FormSubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which FormSubmissions to fetch.
     */
    where?: FormSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormSubmissions to fetch.
     */
    orderBy?: FormSubmissionOrderByWithRelationInput | FormSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FormSubmissions.
     */
    cursor?: FormSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormSubmissions.
     */
    skip?: number
    distinct?: FormSubmissionScalarFieldEnum | FormSubmissionScalarFieldEnum[]
  }

  /**
   * FormSubmission create
   */
  export type FormSubmissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSubmission
     */
    select?: FormSubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormSubmissionInclude<ExtArgs> | null
    /**
     * The data needed to create a FormSubmission.
     */
    data: XOR<FormSubmissionCreateInput, FormSubmissionUncheckedCreateInput>
  }

  /**
   * FormSubmission createMany
   */
  export type FormSubmissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FormSubmissions.
     */
    data: FormSubmissionCreateManyInput | FormSubmissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FormSubmission createManyAndReturn
   */
  export type FormSubmissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSubmission
     */
    select?: FormSubmissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FormSubmissions.
     */
    data: FormSubmissionCreateManyInput | FormSubmissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FormSubmission update
   */
  export type FormSubmissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSubmission
     */
    select?: FormSubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormSubmissionInclude<ExtArgs> | null
    /**
     * The data needed to update a FormSubmission.
     */
    data: XOR<FormSubmissionUpdateInput, FormSubmissionUncheckedUpdateInput>
    /**
     * Choose, which FormSubmission to update.
     */
    where: FormSubmissionWhereUniqueInput
  }

  /**
   * FormSubmission updateMany
   */
  export type FormSubmissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FormSubmissions.
     */
    data: XOR<FormSubmissionUpdateManyMutationInput, FormSubmissionUncheckedUpdateManyInput>
    /**
     * Filter which FormSubmissions to update
     */
    where?: FormSubmissionWhereInput
  }

  /**
   * FormSubmission upsert
   */
  export type FormSubmissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSubmission
     */
    select?: FormSubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormSubmissionInclude<ExtArgs> | null
    /**
     * The filter to search for the FormSubmission to update in case it exists.
     */
    where: FormSubmissionWhereUniqueInput
    /**
     * In case the FormSubmission found by the `where` argument doesn't exist, create a new FormSubmission with this data.
     */
    create: XOR<FormSubmissionCreateInput, FormSubmissionUncheckedCreateInput>
    /**
     * In case the FormSubmission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FormSubmissionUpdateInput, FormSubmissionUncheckedUpdateInput>
  }

  /**
   * FormSubmission delete
   */
  export type FormSubmissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSubmission
     */
    select?: FormSubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormSubmissionInclude<ExtArgs> | null
    /**
     * Filter which FormSubmission to delete.
     */
    where: FormSubmissionWhereUniqueInput
  }

  /**
   * FormSubmission deleteMany
   */
  export type FormSubmissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FormSubmissions to delete
     */
    where?: FormSubmissionWhereInput
  }

  /**
   * FormSubmission.validationLogs
   */
  export type FormSubmission$validationLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationLog
     */
    select?: ValidationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationLogInclude<ExtArgs> | null
    where?: ValidationLogWhereInput
    orderBy?: ValidationLogOrderByWithRelationInput | ValidationLogOrderByWithRelationInput[]
    cursor?: ValidationLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ValidationLogScalarFieldEnum | ValidationLogScalarFieldEnum[]
  }

  /**
   * FormSubmission without action
   */
  export type FormSubmissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSubmission
     */
    select?: FormSubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormSubmissionInclude<ExtArgs> | null
  }


  /**
   * Model ValidationLog
   */

  export type AggregateValidationLog = {
    _count: ValidationLogCountAggregateOutputType | null
    _min: ValidationLogMinAggregateOutputType | null
    _max: ValidationLogMaxAggregateOutputType | null
  }

  export type ValidationLogMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    fieldName: string | null
    fieldValue: string | null
    validationType: string | null
    isValid: boolean | null
    errorMessage: string | null
    formSubmissionId: string | null
  }

  export type ValidationLogMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    fieldName: string | null
    fieldValue: string | null
    validationType: string | null
    isValid: boolean | null
    errorMessage: string | null
    formSubmissionId: string | null
  }

  export type ValidationLogCountAggregateOutputType = {
    id: number
    createdAt: number
    fieldName: number
    fieldValue: number
    validationType: number
    isValid: number
    errorMessage: number
    formSubmissionId: number
    _all: number
  }


  export type ValidationLogMinAggregateInputType = {
    id?: true
    createdAt?: true
    fieldName?: true
    fieldValue?: true
    validationType?: true
    isValid?: true
    errorMessage?: true
    formSubmissionId?: true
  }

  export type ValidationLogMaxAggregateInputType = {
    id?: true
    createdAt?: true
    fieldName?: true
    fieldValue?: true
    validationType?: true
    isValid?: true
    errorMessage?: true
    formSubmissionId?: true
  }

  export type ValidationLogCountAggregateInputType = {
    id?: true
    createdAt?: true
    fieldName?: true
    fieldValue?: true
    validationType?: true
    isValid?: true
    errorMessage?: true
    formSubmissionId?: true
    _all?: true
  }

  export type ValidationLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ValidationLog to aggregate.
     */
    where?: ValidationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ValidationLogs to fetch.
     */
    orderBy?: ValidationLogOrderByWithRelationInput | ValidationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ValidationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ValidationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ValidationLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ValidationLogs
    **/
    _count?: true | ValidationLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ValidationLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ValidationLogMaxAggregateInputType
  }

  export type GetValidationLogAggregateType<T extends ValidationLogAggregateArgs> = {
        [P in keyof T & keyof AggregateValidationLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateValidationLog[P]>
      : GetScalarType<T[P], AggregateValidationLog[P]>
  }




  export type ValidationLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ValidationLogWhereInput
    orderBy?: ValidationLogOrderByWithAggregationInput | ValidationLogOrderByWithAggregationInput[]
    by: ValidationLogScalarFieldEnum[] | ValidationLogScalarFieldEnum
    having?: ValidationLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ValidationLogCountAggregateInputType | true
    _min?: ValidationLogMinAggregateInputType
    _max?: ValidationLogMaxAggregateInputType
  }

  export type ValidationLogGroupByOutputType = {
    id: string
    createdAt: Date
    fieldName: string
    fieldValue: string
    validationType: string
    isValid: boolean
    errorMessage: string | null
    formSubmissionId: string | null
    _count: ValidationLogCountAggregateOutputType | null
    _min: ValidationLogMinAggregateOutputType | null
    _max: ValidationLogMaxAggregateOutputType | null
  }

  type GetValidationLogGroupByPayload<T extends ValidationLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ValidationLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ValidationLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ValidationLogGroupByOutputType[P]>
            : GetScalarType<T[P], ValidationLogGroupByOutputType[P]>
        }
      >
    >


  export type ValidationLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    fieldName?: boolean
    fieldValue?: boolean
    validationType?: boolean
    isValid?: boolean
    errorMessage?: boolean
    formSubmissionId?: boolean
    formSubmission?: boolean | ValidationLog$formSubmissionArgs<ExtArgs>
  }, ExtArgs["result"]["validationLog"]>

  export type ValidationLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    fieldName?: boolean
    fieldValue?: boolean
    validationType?: boolean
    isValid?: boolean
    errorMessage?: boolean
    formSubmissionId?: boolean
    formSubmission?: boolean | ValidationLog$formSubmissionArgs<ExtArgs>
  }, ExtArgs["result"]["validationLog"]>

  export type ValidationLogSelectScalar = {
    id?: boolean
    createdAt?: boolean
    fieldName?: boolean
    fieldValue?: boolean
    validationType?: boolean
    isValid?: boolean
    errorMessage?: boolean
    formSubmissionId?: boolean
  }

  export type ValidationLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    formSubmission?: boolean | ValidationLog$formSubmissionArgs<ExtArgs>
  }
  export type ValidationLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    formSubmission?: boolean | ValidationLog$formSubmissionArgs<ExtArgs>
  }

  export type $ValidationLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ValidationLog"
    objects: {
      formSubmission: Prisma.$FormSubmissionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      fieldName: string
      fieldValue: string
      validationType: string
      isValid: boolean
      errorMessage: string | null
      formSubmissionId: string | null
    }, ExtArgs["result"]["validationLog"]>
    composites: {}
  }

  type ValidationLogGetPayload<S extends boolean | null | undefined | ValidationLogDefaultArgs> = $Result.GetResult<Prisma.$ValidationLogPayload, S>

  type ValidationLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ValidationLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ValidationLogCountAggregateInputType | true
    }

  export interface ValidationLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ValidationLog'], meta: { name: 'ValidationLog' } }
    /**
     * Find zero or one ValidationLog that matches the filter.
     * @param {ValidationLogFindUniqueArgs} args - Arguments to find a ValidationLog
     * @example
     * // Get one ValidationLog
     * const validationLog = await prisma.validationLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ValidationLogFindUniqueArgs>(args: SelectSubset<T, ValidationLogFindUniqueArgs<ExtArgs>>): Prisma__ValidationLogClient<$Result.GetResult<Prisma.$ValidationLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ValidationLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ValidationLogFindUniqueOrThrowArgs} args - Arguments to find a ValidationLog
     * @example
     * // Get one ValidationLog
     * const validationLog = await prisma.validationLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ValidationLogFindUniqueOrThrowArgs>(args: SelectSubset<T, ValidationLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ValidationLogClient<$Result.GetResult<Prisma.$ValidationLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ValidationLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationLogFindFirstArgs} args - Arguments to find a ValidationLog
     * @example
     * // Get one ValidationLog
     * const validationLog = await prisma.validationLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ValidationLogFindFirstArgs>(args?: SelectSubset<T, ValidationLogFindFirstArgs<ExtArgs>>): Prisma__ValidationLogClient<$Result.GetResult<Prisma.$ValidationLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ValidationLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationLogFindFirstOrThrowArgs} args - Arguments to find a ValidationLog
     * @example
     * // Get one ValidationLog
     * const validationLog = await prisma.validationLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ValidationLogFindFirstOrThrowArgs>(args?: SelectSubset<T, ValidationLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__ValidationLogClient<$Result.GetResult<Prisma.$ValidationLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ValidationLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ValidationLogs
     * const validationLogs = await prisma.validationLog.findMany()
     * 
     * // Get first 10 ValidationLogs
     * const validationLogs = await prisma.validationLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const validationLogWithIdOnly = await prisma.validationLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ValidationLogFindManyArgs>(args?: SelectSubset<T, ValidationLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValidationLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ValidationLog.
     * @param {ValidationLogCreateArgs} args - Arguments to create a ValidationLog.
     * @example
     * // Create one ValidationLog
     * const ValidationLog = await prisma.validationLog.create({
     *   data: {
     *     // ... data to create a ValidationLog
     *   }
     * })
     * 
     */
    create<T extends ValidationLogCreateArgs>(args: SelectSubset<T, ValidationLogCreateArgs<ExtArgs>>): Prisma__ValidationLogClient<$Result.GetResult<Prisma.$ValidationLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ValidationLogs.
     * @param {ValidationLogCreateManyArgs} args - Arguments to create many ValidationLogs.
     * @example
     * // Create many ValidationLogs
     * const validationLog = await prisma.validationLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ValidationLogCreateManyArgs>(args?: SelectSubset<T, ValidationLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ValidationLogs and returns the data saved in the database.
     * @param {ValidationLogCreateManyAndReturnArgs} args - Arguments to create many ValidationLogs.
     * @example
     * // Create many ValidationLogs
     * const validationLog = await prisma.validationLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ValidationLogs and only return the `id`
     * const validationLogWithIdOnly = await prisma.validationLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ValidationLogCreateManyAndReturnArgs>(args?: SelectSubset<T, ValidationLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValidationLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ValidationLog.
     * @param {ValidationLogDeleteArgs} args - Arguments to delete one ValidationLog.
     * @example
     * // Delete one ValidationLog
     * const ValidationLog = await prisma.validationLog.delete({
     *   where: {
     *     // ... filter to delete one ValidationLog
     *   }
     * })
     * 
     */
    delete<T extends ValidationLogDeleteArgs>(args: SelectSubset<T, ValidationLogDeleteArgs<ExtArgs>>): Prisma__ValidationLogClient<$Result.GetResult<Prisma.$ValidationLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ValidationLog.
     * @param {ValidationLogUpdateArgs} args - Arguments to update one ValidationLog.
     * @example
     * // Update one ValidationLog
     * const validationLog = await prisma.validationLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ValidationLogUpdateArgs>(args: SelectSubset<T, ValidationLogUpdateArgs<ExtArgs>>): Prisma__ValidationLogClient<$Result.GetResult<Prisma.$ValidationLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ValidationLogs.
     * @param {ValidationLogDeleteManyArgs} args - Arguments to filter ValidationLogs to delete.
     * @example
     * // Delete a few ValidationLogs
     * const { count } = await prisma.validationLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ValidationLogDeleteManyArgs>(args?: SelectSubset<T, ValidationLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ValidationLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ValidationLogs
     * const validationLog = await prisma.validationLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ValidationLogUpdateManyArgs>(args: SelectSubset<T, ValidationLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ValidationLog.
     * @param {ValidationLogUpsertArgs} args - Arguments to update or create a ValidationLog.
     * @example
     * // Update or create a ValidationLog
     * const validationLog = await prisma.validationLog.upsert({
     *   create: {
     *     // ... data to create a ValidationLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ValidationLog we want to update
     *   }
     * })
     */
    upsert<T extends ValidationLogUpsertArgs>(args: SelectSubset<T, ValidationLogUpsertArgs<ExtArgs>>): Prisma__ValidationLogClient<$Result.GetResult<Prisma.$ValidationLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ValidationLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationLogCountArgs} args - Arguments to filter ValidationLogs to count.
     * @example
     * // Count the number of ValidationLogs
     * const count = await prisma.validationLog.count({
     *   where: {
     *     // ... the filter for the ValidationLogs we want to count
     *   }
     * })
    **/
    count<T extends ValidationLogCountArgs>(
      args?: Subset<T, ValidationLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ValidationLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ValidationLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ValidationLogAggregateArgs>(args: Subset<T, ValidationLogAggregateArgs>): Prisma.PrismaPromise<GetValidationLogAggregateType<T>>

    /**
     * Group by ValidationLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ValidationLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ValidationLogGroupByArgs['orderBy'] }
        : { orderBy?: ValidationLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ValidationLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetValidationLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ValidationLog model
   */
  readonly fields: ValidationLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ValidationLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ValidationLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    formSubmission<T extends ValidationLog$formSubmissionArgs<ExtArgs> = {}>(args?: Subset<T, ValidationLog$formSubmissionArgs<ExtArgs>>): Prisma__FormSubmissionClient<$Result.GetResult<Prisma.$FormSubmissionPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ValidationLog model
   */ 
  interface ValidationLogFieldRefs {
    readonly id: FieldRef<"ValidationLog", 'String'>
    readonly createdAt: FieldRef<"ValidationLog", 'DateTime'>
    readonly fieldName: FieldRef<"ValidationLog", 'String'>
    readonly fieldValue: FieldRef<"ValidationLog", 'String'>
    readonly validationType: FieldRef<"ValidationLog", 'String'>
    readonly isValid: FieldRef<"ValidationLog", 'Boolean'>
    readonly errorMessage: FieldRef<"ValidationLog", 'String'>
    readonly formSubmissionId: FieldRef<"ValidationLog", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ValidationLog findUnique
   */
  export type ValidationLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationLog
     */
    select?: ValidationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationLogInclude<ExtArgs> | null
    /**
     * Filter, which ValidationLog to fetch.
     */
    where: ValidationLogWhereUniqueInput
  }

  /**
   * ValidationLog findUniqueOrThrow
   */
  export type ValidationLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationLog
     */
    select?: ValidationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationLogInclude<ExtArgs> | null
    /**
     * Filter, which ValidationLog to fetch.
     */
    where: ValidationLogWhereUniqueInput
  }

  /**
   * ValidationLog findFirst
   */
  export type ValidationLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationLog
     */
    select?: ValidationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationLogInclude<ExtArgs> | null
    /**
     * Filter, which ValidationLog to fetch.
     */
    where?: ValidationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ValidationLogs to fetch.
     */
    orderBy?: ValidationLogOrderByWithRelationInput | ValidationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ValidationLogs.
     */
    cursor?: ValidationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ValidationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ValidationLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ValidationLogs.
     */
    distinct?: ValidationLogScalarFieldEnum | ValidationLogScalarFieldEnum[]
  }

  /**
   * ValidationLog findFirstOrThrow
   */
  export type ValidationLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationLog
     */
    select?: ValidationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationLogInclude<ExtArgs> | null
    /**
     * Filter, which ValidationLog to fetch.
     */
    where?: ValidationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ValidationLogs to fetch.
     */
    orderBy?: ValidationLogOrderByWithRelationInput | ValidationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ValidationLogs.
     */
    cursor?: ValidationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ValidationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ValidationLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ValidationLogs.
     */
    distinct?: ValidationLogScalarFieldEnum | ValidationLogScalarFieldEnum[]
  }

  /**
   * ValidationLog findMany
   */
  export type ValidationLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationLog
     */
    select?: ValidationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationLogInclude<ExtArgs> | null
    /**
     * Filter, which ValidationLogs to fetch.
     */
    where?: ValidationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ValidationLogs to fetch.
     */
    orderBy?: ValidationLogOrderByWithRelationInput | ValidationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ValidationLogs.
     */
    cursor?: ValidationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ValidationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ValidationLogs.
     */
    skip?: number
    distinct?: ValidationLogScalarFieldEnum | ValidationLogScalarFieldEnum[]
  }

  /**
   * ValidationLog create
   */
  export type ValidationLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationLog
     */
    select?: ValidationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationLogInclude<ExtArgs> | null
    /**
     * The data needed to create a ValidationLog.
     */
    data: XOR<ValidationLogCreateInput, ValidationLogUncheckedCreateInput>
  }

  /**
   * ValidationLog createMany
   */
  export type ValidationLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ValidationLogs.
     */
    data: ValidationLogCreateManyInput | ValidationLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ValidationLog createManyAndReturn
   */
  export type ValidationLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationLog
     */
    select?: ValidationLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ValidationLogs.
     */
    data: ValidationLogCreateManyInput | ValidationLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ValidationLog update
   */
  export type ValidationLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationLog
     */
    select?: ValidationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationLogInclude<ExtArgs> | null
    /**
     * The data needed to update a ValidationLog.
     */
    data: XOR<ValidationLogUpdateInput, ValidationLogUncheckedUpdateInput>
    /**
     * Choose, which ValidationLog to update.
     */
    where: ValidationLogWhereUniqueInput
  }

  /**
   * ValidationLog updateMany
   */
  export type ValidationLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ValidationLogs.
     */
    data: XOR<ValidationLogUpdateManyMutationInput, ValidationLogUncheckedUpdateManyInput>
    /**
     * Filter which ValidationLogs to update
     */
    where?: ValidationLogWhereInput
  }

  /**
   * ValidationLog upsert
   */
  export type ValidationLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationLog
     */
    select?: ValidationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationLogInclude<ExtArgs> | null
    /**
     * The filter to search for the ValidationLog to update in case it exists.
     */
    where: ValidationLogWhereUniqueInput
    /**
     * In case the ValidationLog found by the `where` argument doesn't exist, create a new ValidationLog with this data.
     */
    create: XOR<ValidationLogCreateInput, ValidationLogUncheckedCreateInput>
    /**
     * In case the ValidationLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ValidationLogUpdateInput, ValidationLogUncheckedUpdateInput>
  }

  /**
   * ValidationLog delete
   */
  export type ValidationLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationLog
     */
    select?: ValidationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationLogInclude<ExtArgs> | null
    /**
     * Filter which ValidationLog to delete.
     */
    where: ValidationLogWhereUniqueInput
  }

  /**
   * ValidationLog deleteMany
   */
  export type ValidationLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ValidationLogs to delete
     */
    where?: ValidationLogWhereInput
  }

  /**
   * ValidationLog.formSubmission
   */
  export type ValidationLog$formSubmissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormSubmission
     */
    select?: FormSubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormSubmissionInclude<ExtArgs> | null
    where?: FormSubmissionWhereInput
  }

  /**
   * ValidationLog without action
   */
  export type ValidationLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationLog
     */
    select?: ValidationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const FormSubmissionScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    aadhaarNumber: 'aadhaarNumber',
    mobileNumber: 'mobileNumber',
    emailAddress: 'emailAddress',
    otpVerified: 'otpVerified',
    panNumber: 'panNumber',
    businessName: 'businessName',
    businessType: 'businessType',
    addressLine1: 'addressLine1',
    addressLine2: 'addressLine2',
    city: 'city',
    state: 'state',
    pincode: 'pincode',
    status: 'status',
    notes: 'notes',
    validationErrors: 'validationErrors'
  };

  export type FormSubmissionScalarFieldEnum = (typeof FormSubmissionScalarFieldEnum)[keyof typeof FormSubmissionScalarFieldEnum]


  export const ValidationLogScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    fieldName: 'fieldName',
    fieldValue: 'fieldValue',
    validationType: 'validationType',
    isValid: 'isValid',
    errorMessage: 'errorMessage',
    formSubmissionId: 'formSubmissionId'
  };

  export type ValidationLogScalarFieldEnum = (typeof ValidationLogScalarFieldEnum)[keyof typeof ValidationLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'FormStatus'
   */
  export type EnumFormStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FormStatus'>
    


  /**
   * Reference to a field of type 'FormStatus[]'
   */
  export type ListEnumFormStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FormStatus[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type FormSubmissionWhereInput = {
    AND?: FormSubmissionWhereInput | FormSubmissionWhereInput[]
    OR?: FormSubmissionWhereInput[]
    NOT?: FormSubmissionWhereInput | FormSubmissionWhereInput[]
    id?: StringFilter<"FormSubmission"> | string
    createdAt?: DateTimeFilter<"FormSubmission"> | Date | string
    updatedAt?: DateTimeFilter<"FormSubmission"> | Date | string
    aadhaarNumber?: StringFilter<"FormSubmission"> | string
    mobileNumber?: StringFilter<"FormSubmission"> | string
    emailAddress?: StringFilter<"FormSubmission"> | string
    otpVerified?: BoolFilter<"FormSubmission"> | boolean
    panNumber?: StringFilter<"FormSubmission"> | string
    businessName?: StringFilter<"FormSubmission"> | string
    businessType?: StringFilter<"FormSubmission"> | string
    addressLine1?: StringFilter<"FormSubmission"> | string
    addressLine2?: StringNullableFilter<"FormSubmission"> | string | null
    city?: StringFilter<"FormSubmission"> | string
    state?: StringFilter<"FormSubmission"> | string
    pincode?: StringFilter<"FormSubmission"> | string
    status?: EnumFormStatusFilter<"FormSubmission"> | $Enums.FormStatus
    notes?: StringNullableFilter<"FormSubmission"> | string | null
    validationErrors?: JsonNullableFilter<"FormSubmission">
    validationLogs?: ValidationLogListRelationFilter
  }

  export type FormSubmissionOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    aadhaarNumber?: SortOrder
    mobileNumber?: SortOrder
    emailAddress?: SortOrder
    otpVerified?: SortOrder
    panNumber?: SortOrder
    businessName?: SortOrder
    businessType?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrderInput | SortOrder
    city?: SortOrder
    state?: SortOrder
    pincode?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    validationErrors?: SortOrderInput | SortOrder
    validationLogs?: ValidationLogOrderByRelationAggregateInput
  }

  export type FormSubmissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    aadhaarNumber?: string
    panNumber?: string
    AND?: FormSubmissionWhereInput | FormSubmissionWhereInput[]
    OR?: FormSubmissionWhereInput[]
    NOT?: FormSubmissionWhereInput | FormSubmissionWhereInput[]
    createdAt?: DateTimeFilter<"FormSubmission"> | Date | string
    updatedAt?: DateTimeFilter<"FormSubmission"> | Date | string
    mobileNumber?: StringFilter<"FormSubmission"> | string
    emailAddress?: StringFilter<"FormSubmission"> | string
    otpVerified?: BoolFilter<"FormSubmission"> | boolean
    businessName?: StringFilter<"FormSubmission"> | string
    businessType?: StringFilter<"FormSubmission"> | string
    addressLine1?: StringFilter<"FormSubmission"> | string
    addressLine2?: StringNullableFilter<"FormSubmission"> | string | null
    city?: StringFilter<"FormSubmission"> | string
    state?: StringFilter<"FormSubmission"> | string
    pincode?: StringFilter<"FormSubmission"> | string
    status?: EnumFormStatusFilter<"FormSubmission"> | $Enums.FormStatus
    notes?: StringNullableFilter<"FormSubmission"> | string | null
    validationErrors?: JsonNullableFilter<"FormSubmission">
    validationLogs?: ValidationLogListRelationFilter
  }, "id" | "aadhaarNumber" | "panNumber">

  export type FormSubmissionOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    aadhaarNumber?: SortOrder
    mobileNumber?: SortOrder
    emailAddress?: SortOrder
    otpVerified?: SortOrder
    panNumber?: SortOrder
    businessName?: SortOrder
    businessType?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrderInput | SortOrder
    city?: SortOrder
    state?: SortOrder
    pincode?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    validationErrors?: SortOrderInput | SortOrder
    _count?: FormSubmissionCountOrderByAggregateInput
    _max?: FormSubmissionMaxOrderByAggregateInput
    _min?: FormSubmissionMinOrderByAggregateInput
  }

  export type FormSubmissionScalarWhereWithAggregatesInput = {
    AND?: FormSubmissionScalarWhereWithAggregatesInput | FormSubmissionScalarWhereWithAggregatesInput[]
    OR?: FormSubmissionScalarWhereWithAggregatesInput[]
    NOT?: FormSubmissionScalarWhereWithAggregatesInput | FormSubmissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FormSubmission"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FormSubmission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FormSubmission"> | Date | string
    aadhaarNumber?: StringWithAggregatesFilter<"FormSubmission"> | string
    mobileNumber?: StringWithAggregatesFilter<"FormSubmission"> | string
    emailAddress?: StringWithAggregatesFilter<"FormSubmission"> | string
    otpVerified?: BoolWithAggregatesFilter<"FormSubmission"> | boolean
    panNumber?: StringWithAggregatesFilter<"FormSubmission"> | string
    businessName?: StringWithAggregatesFilter<"FormSubmission"> | string
    businessType?: StringWithAggregatesFilter<"FormSubmission"> | string
    addressLine1?: StringWithAggregatesFilter<"FormSubmission"> | string
    addressLine2?: StringNullableWithAggregatesFilter<"FormSubmission"> | string | null
    city?: StringWithAggregatesFilter<"FormSubmission"> | string
    state?: StringWithAggregatesFilter<"FormSubmission"> | string
    pincode?: StringWithAggregatesFilter<"FormSubmission"> | string
    status?: EnumFormStatusWithAggregatesFilter<"FormSubmission"> | $Enums.FormStatus
    notes?: StringNullableWithAggregatesFilter<"FormSubmission"> | string | null
    validationErrors?: JsonNullableWithAggregatesFilter<"FormSubmission">
  }

  export type ValidationLogWhereInput = {
    AND?: ValidationLogWhereInput | ValidationLogWhereInput[]
    OR?: ValidationLogWhereInput[]
    NOT?: ValidationLogWhereInput | ValidationLogWhereInput[]
    id?: StringFilter<"ValidationLog"> | string
    createdAt?: DateTimeFilter<"ValidationLog"> | Date | string
    fieldName?: StringFilter<"ValidationLog"> | string
    fieldValue?: StringFilter<"ValidationLog"> | string
    validationType?: StringFilter<"ValidationLog"> | string
    isValid?: BoolFilter<"ValidationLog"> | boolean
    errorMessage?: StringNullableFilter<"ValidationLog"> | string | null
    formSubmissionId?: StringNullableFilter<"ValidationLog"> | string | null
    formSubmission?: XOR<FormSubmissionNullableRelationFilter, FormSubmissionWhereInput> | null
  }

  export type ValidationLogOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    fieldName?: SortOrder
    fieldValue?: SortOrder
    validationType?: SortOrder
    isValid?: SortOrder
    errorMessage?: SortOrderInput | SortOrder
    formSubmissionId?: SortOrderInput | SortOrder
    formSubmission?: FormSubmissionOrderByWithRelationInput
  }

  export type ValidationLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ValidationLogWhereInput | ValidationLogWhereInput[]
    OR?: ValidationLogWhereInput[]
    NOT?: ValidationLogWhereInput | ValidationLogWhereInput[]
    createdAt?: DateTimeFilter<"ValidationLog"> | Date | string
    fieldName?: StringFilter<"ValidationLog"> | string
    fieldValue?: StringFilter<"ValidationLog"> | string
    validationType?: StringFilter<"ValidationLog"> | string
    isValid?: BoolFilter<"ValidationLog"> | boolean
    errorMessage?: StringNullableFilter<"ValidationLog"> | string | null
    formSubmissionId?: StringNullableFilter<"ValidationLog"> | string | null
    formSubmission?: XOR<FormSubmissionNullableRelationFilter, FormSubmissionWhereInput> | null
  }, "id">

  export type ValidationLogOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    fieldName?: SortOrder
    fieldValue?: SortOrder
    validationType?: SortOrder
    isValid?: SortOrder
    errorMessage?: SortOrderInput | SortOrder
    formSubmissionId?: SortOrderInput | SortOrder
    _count?: ValidationLogCountOrderByAggregateInput
    _max?: ValidationLogMaxOrderByAggregateInput
    _min?: ValidationLogMinOrderByAggregateInput
  }

  export type ValidationLogScalarWhereWithAggregatesInput = {
    AND?: ValidationLogScalarWhereWithAggregatesInput | ValidationLogScalarWhereWithAggregatesInput[]
    OR?: ValidationLogScalarWhereWithAggregatesInput[]
    NOT?: ValidationLogScalarWhereWithAggregatesInput | ValidationLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ValidationLog"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ValidationLog"> | Date | string
    fieldName?: StringWithAggregatesFilter<"ValidationLog"> | string
    fieldValue?: StringWithAggregatesFilter<"ValidationLog"> | string
    validationType?: StringWithAggregatesFilter<"ValidationLog"> | string
    isValid?: BoolWithAggregatesFilter<"ValidationLog"> | boolean
    errorMessage?: StringNullableWithAggregatesFilter<"ValidationLog"> | string | null
    formSubmissionId?: StringNullableWithAggregatesFilter<"ValidationLog"> | string | null
  }

  export type FormSubmissionCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    aadhaarNumber: string
    mobileNumber: string
    emailAddress: string
    otpVerified?: boolean
    panNumber: string
    businessName: string
    businessType: string
    addressLine1: string
    addressLine2?: string | null
    city: string
    state: string
    pincode: string
    status?: $Enums.FormStatus
    notes?: string | null
    validationErrors?: NullableJsonNullValueInput | InputJsonValue
    validationLogs?: ValidationLogCreateNestedManyWithoutFormSubmissionInput
  }

  export type FormSubmissionUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    aadhaarNumber: string
    mobileNumber: string
    emailAddress: string
    otpVerified?: boolean
    panNumber: string
    businessName: string
    businessType: string
    addressLine1: string
    addressLine2?: string | null
    city: string
    state: string
    pincode: string
    status?: $Enums.FormStatus
    notes?: string | null
    validationErrors?: NullableJsonNullValueInput | InputJsonValue
    validationLogs?: ValidationLogUncheckedCreateNestedManyWithoutFormSubmissionInput
  }

  export type FormSubmissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aadhaarNumber?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    emailAddress?: StringFieldUpdateOperationsInput | string
    otpVerified?: BoolFieldUpdateOperationsInput | boolean
    panNumber?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    businessType?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    status?: EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    validationErrors?: NullableJsonNullValueInput | InputJsonValue
    validationLogs?: ValidationLogUpdateManyWithoutFormSubmissionNestedInput
  }

  export type FormSubmissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aadhaarNumber?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    emailAddress?: StringFieldUpdateOperationsInput | string
    otpVerified?: BoolFieldUpdateOperationsInput | boolean
    panNumber?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    businessType?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    status?: EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    validationErrors?: NullableJsonNullValueInput | InputJsonValue
    validationLogs?: ValidationLogUncheckedUpdateManyWithoutFormSubmissionNestedInput
  }

  export type FormSubmissionCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    aadhaarNumber: string
    mobileNumber: string
    emailAddress: string
    otpVerified?: boolean
    panNumber: string
    businessName: string
    businessType: string
    addressLine1: string
    addressLine2?: string | null
    city: string
    state: string
    pincode: string
    status?: $Enums.FormStatus
    notes?: string | null
    validationErrors?: NullableJsonNullValueInput | InputJsonValue
  }

  export type FormSubmissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aadhaarNumber?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    emailAddress?: StringFieldUpdateOperationsInput | string
    otpVerified?: BoolFieldUpdateOperationsInput | boolean
    panNumber?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    businessType?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    status?: EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    validationErrors?: NullableJsonNullValueInput | InputJsonValue
  }

  export type FormSubmissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aadhaarNumber?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    emailAddress?: StringFieldUpdateOperationsInput | string
    otpVerified?: BoolFieldUpdateOperationsInput | boolean
    panNumber?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    businessType?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    status?: EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    validationErrors?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ValidationLogCreateInput = {
    id?: string
    createdAt?: Date | string
    fieldName: string
    fieldValue: string
    validationType: string
    isValid: boolean
    errorMessage?: string | null
    formSubmission?: FormSubmissionCreateNestedOneWithoutValidationLogsInput
  }

  export type ValidationLogUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    fieldName: string
    fieldValue: string
    validationType: string
    isValid: boolean
    errorMessage?: string | null
    formSubmissionId?: string | null
  }

  export type ValidationLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldValue?: StringFieldUpdateOperationsInput | string
    validationType?: StringFieldUpdateOperationsInput | string
    isValid?: BoolFieldUpdateOperationsInput | boolean
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    formSubmission?: FormSubmissionUpdateOneWithoutValidationLogsNestedInput
  }

  export type ValidationLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldValue?: StringFieldUpdateOperationsInput | string
    validationType?: StringFieldUpdateOperationsInput | string
    isValid?: BoolFieldUpdateOperationsInput | boolean
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    formSubmissionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ValidationLogCreateManyInput = {
    id?: string
    createdAt?: Date | string
    fieldName: string
    fieldValue: string
    validationType: string
    isValid: boolean
    errorMessage?: string | null
    formSubmissionId?: string | null
  }

  export type ValidationLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldValue?: StringFieldUpdateOperationsInput | string
    validationType?: StringFieldUpdateOperationsInput | string
    isValid?: BoolFieldUpdateOperationsInput | boolean
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ValidationLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldValue?: StringFieldUpdateOperationsInput | string
    validationType?: StringFieldUpdateOperationsInput | string
    isValid?: BoolFieldUpdateOperationsInput | boolean
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    formSubmissionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumFormStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.FormStatus | EnumFormStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FormStatus[] | ListEnumFormStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FormStatus[] | ListEnumFormStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFormStatusFilter<$PrismaModel> | $Enums.FormStatus
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ValidationLogListRelationFilter = {
    every?: ValidationLogWhereInput
    some?: ValidationLogWhereInput
    none?: ValidationLogWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ValidationLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FormSubmissionCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    aadhaarNumber?: SortOrder
    mobileNumber?: SortOrder
    emailAddress?: SortOrder
    otpVerified?: SortOrder
    panNumber?: SortOrder
    businessName?: SortOrder
    businessType?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    city?: SortOrder
    state?: SortOrder
    pincode?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    validationErrors?: SortOrder
  }

  export type FormSubmissionMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    aadhaarNumber?: SortOrder
    mobileNumber?: SortOrder
    emailAddress?: SortOrder
    otpVerified?: SortOrder
    panNumber?: SortOrder
    businessName?: SortOrder
    businessType?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    city?: SortOrder
    state?: SortOrder
    pincode?: SortOrder
    status?: SortOrder
    notes?: SortOrder
  }

  export type FormSubmissionMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    aadhaarNumber?: SortOrder
    mobileNumber?: SortOrder
    emailAddress?: SortOrder
    otpVerified?: SortOrder
    panNumber?: SortOrder
    businessName?: SortOrder
    businessType?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    city?: SortOrder
    state?: SortOrder
    pincode?: SortOrder
    status?: SortOrder
    notes?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumFormStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FormStatus | EnumFormStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FormStatus[] | ListEnumFormStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FormStatus[] | ListEnumFormStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFormStatusWithAggregatesFilter<$PrismaModel> | $Enums.FormStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFormStatusFilter<$PrismaModel>
    _max?: NestedEnumFormStatusFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type FormSubmissionNullableRelationFilter = {
    is?: FormSubmissionWhereInput | null
    isNot?: FormSubmissionWhereInput | null
  }

  export type ValidationLogCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    fieldName?: SortOrder
    fieldValue?: SortOrder
    validationType?: SortOrder
    isValid?: SortOrder
    errorMessage?: SortOrder
    formSubmissionId?: SortOrder
  }

  export type ValidationLogMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    fieldName?: SortOrder
    fieldValue?: SortOrder
    validationType?: SortOrder
    isValid?: SortOrder
    errorMessage?: SortOrder
    formSubmissionId?: SortOrder
  }

  export type ValidationLogMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    fieldName?: SortOrder
    fieldValue?: SortOrder
    validationType?: SortOrder
    isValid?: SortOrder
    errorMessage?: SortOrder
    formSubmissionId?: SortOrder
  }

  export type ValidationLogCreateNestedManyWithoutFormSubmissionInput = {
    create?: XOR<ValidationLogCreateWithoutFormSubmissionInput, ValidationLogUncheckedCreateWithoutFormSubmissionInput> | ValidationLogCreateWithoutFormSubmissionInput[] | ValidationLogUncheckedCreateWithoutFormSubmissionInput[]
    connectOrCreate?: ValidationLogCreateOrConnectWithoutFormSubmissionInput | ValidationLogCreateOrConnectWithoutFormSubmissionInput[]
    createMany?: ValidationLogCreateManyFormSubmissionInputEnvelope
    connect?: ValidationLogWhereUniqueInput | ValidationLogWhereUniqueInput[]
  }

  export type ValidationLogUncheckedCreateNestedManyWithoutFormSubmissionInput = {
    create?: XOR<ValidationLogCreateWithoutFormSubmissionInput, ValidationLogUncheckedCreateWithoutFormSubmissionInput> | ValidationLogCreateWithoutFormSubmissionInput[] | ValidationLogUncheckedCreateWithoutFormSubmissionInput[]
    connectOrCreate?: ValidationLogCreateOrConnectWithoutFormSubmissionInput | ValidationLogCreateOrConnectWithoutFormSubmissionInput[]
    createMany?: ValidationLogCreateManyFormSubmissionInputEnvelope
    connect?: ValidationLogWhereUniqueInput | ValidationLogWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumFormStatusFieldUpdateOperationsInput = {
    set?: $Enums.FormStatus
  }

  export type ValidationLogUpdateManyWithoutFormSubmissionNestedInput = {
    create?: XOR<ValidationLogCreateWithoutFormSubmissionInput, ValidationLogUncheckedCreateWithoutFormSubmissionInput> | ValidationLogCreateWithoutFormSubmissionInput[] | ValidationLogUncheckedCreateWithoutFormSubmissionInput[]
    connectOrCreate?: ValidationLogCreateOrConnectWithoutFormSubmissionInput | ValidationLogCreateOrConnectWithoutFormSubmissionInput[]
    upsert?: ValidationLogUpsertWithWhereUniqueWithoutFormSubmissionInput | ValidationLogUpsertWithWhereUniqueWithoutFormSubmissionInput[]
    createMany?: ValidationLogCreateManyFormSubmissionInputEnvelope
    set?: ValidationLogWhereUniqueInput | ValidationLogWhereUniqueInput[]
    disconnect?: ValidationLogWhereUniqueInput | ValidationLogWhereUniqueInput[]
    delete?: ValidationLogWhereUniqueInput | ValidationLogWhereUniqueInput[]
    connect?: ValidationLogWhereUniqueInput | ValidationLogWhereUniqueInput[]
    update?: ValidationLogUpdateWithWhereUniqueWithoutFormSubmissionInput | ValidationLogUpdateWithWhereUniqueWithoutFormSubmissionInput[]
    updateMany?: ValidationLogUpdateManyWithWhereWithoutFormSubmissionInput | ValidationLogUpdateManyWithWhereWithoutFormSubmissionInput[]
    deleteMany?: ValidationLogScalarWhereInput | ValidationLogScalarWhereInput[]
  }

  export type ValidationLogUncheckedUpdateManyWithoutFormSubmissionNestedInput = {
    create?: XOR<ValidationLogCreateWithoutFormSubmissionInput, ValidationLogUncheckedCreateWithoutFormSubmissionInput> | ValidationLogCreateWithoutFormSubmissionInput[] | ValidationLogUncheckedCreateWithoutFormSubmissionInput[]
    connectOrCreate?: ValidationLogCreateOrConnectWithoutFormSubmissionInput | ValidationLogCreateOrConnectWithoutFormSubmissionInput[]
    upsert?: ValidationLogUpsertWithWhereUniqueWithoutFormSubmissionInput | ValidationLogUpsertWithWhereUniqueWithoutFormSubmissionInput[]
    createMany?: ValidationLogCreateManyFormSubmissionInputEnvelope
    set?: ValidationLogWhereUniqueInput | ValidationLogWhereUniqueInput[]
    disconnect?: ValidationLogWhereUniqueInput | ValidationLogWhereUniqueInput[]
    delete?: ValidationLogWhereUniqueInput | ValidationLogWhereUniqueInput[]
    connect?: ValidationLogWhereUniqueInput | ValidationLogWhereUniqueInput[]
    update?: ValidationLogUpdateWithWhereUniqueWithoutFormSubmissionInput | ValidationLogUpdateWithWhereUniqueWithoutFormSubmissionInput[]
    updateMany?: ValidationLogUpdateManyWithWhereWithoutFormSubmissionInput | ValidationLogUpdateManyWithWhereWithoutFormSubmissionInput[]
    deleteMany?: ValidationLogScalarWhereInput | ValidationLogScalarWhereInput[]
  }

  export type FormSubmissionCreateNestedOneWithoutValidationLogsInput = {
    create?: XOR<FormSubmissionCreateWithoutValidationLogsInput, FormSubmissionUncheckedCreateWithoutValidationLogsInput>
    connectOrCreate?: FormSubmissionCreateOrConnectWithoutValidationLogsInput
    connect?: FormSubmissionWhereUniqueInput
  }

  export type FormSubmissionUpdateOneWithoutValidationLogsNestedInput = {
    create?: XOR<FormSubmissionCreateWithoutValidationLogsInput, FormSubmissionUncheckedCreateWithoutValidationLogsInput>
    connectOrCreate?: FormSubmissionCreateOrConnectWithoutValidationLogsInput
    upsert?: FormSubmissionUpsertWithoutValidationLogsInput
    disconnect?: FormSubmissionWhereInput | boolean
    delete?: FormSubmissionWhereInput | boolean
    connect?: FormSubmissionWhereUniqueInput
    update?: XOR<XOR<FormSubmissionUpdateToOneWithWhereWithoutValidationLogsInput, FormSubmissionUpdateWithoutValidationLogsInput>, FormSubmissionUncheckedUpdateWithoutValidationLogsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumFormStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.FormStatus | EnumFormStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FormStatus[] | ListEnumFormStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FormStatus[] | ListEnumFormStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFormStatusFilter<$PrismaModel> | $Enums.FormStatus
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumFormStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FormStatus | EnumFormStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FormStatus[] | ListEnumFormStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FormStatus[] | ListEnumFormStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFormStatusWithAggregatesFilter<$PrismaModel> | $Enums.FormStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFormStatusFilter<$PrismaModel>
    _max?: NestedEnumFormStatusFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ValidationLogCreateWithoutFormSubmissionInput = {
    id?: string
    createdAt?: Date | string
    fieldName: string
    fieldValue: string
    validationType: string
    isValid: boolean
    errorMessage?: string | null
  }

  export type ValidationLogUncheckedCreateWithoutFormSubmissionInput = {
    id?: string
    createdAt?: Date | string
    fieldName: string
    fieldValue: string
    validationType: string
    isValid: boolean
    errorMessage?: string | null
  }

  export type ValidationLogCreateOrConnectWithoutFormSubmissionInput = {
    where: ValidationLogWhereUniqueInput
    create: XOR<ValidationLogCreateWithoutFormSubmissionInput, ValidationLogUncheckedCreateWithoutFormSubmissionInput>
  }

  export type ValidationLogCreateManyFormSubmissionInputEnvelope = {
    data: ValidationLogCreateManyFormSubmissionInput | ValidationLogCreateManyFormSubmissionInput[]
    skipDuplicates?: boolean
  }

  export type ValidationLogUpsertWithWhereUniqueWithoutFormSubmissionInput = {
    where: ValidationLogWhereUniqueInput
    update: XOR<ValidationLogUpdateWithoutFormSubmissionInput, ValidationLogUncheckedUpdateWithoutFormSubmissionInput>
    create: XOR<ValidationLogCreateWithoutFormSubmissionInput, ValidationLogUncheckedCreateWithoutFormSubmissionInput>
  }

  export type ValidationLogUpdateWithWhereUniqueWithoutFormSubmissionInput = {
    where: ValidationLogWhereUniqueInput
    data: XOR<ValidationLogUpdateWithoutFormSubmissionInput, ValidationLogUncheckedUpdateWithoutFormSubmissionInput>
  }

  export type ValidationLogUpdateManyWithWhereWithoutFormSubmissionInput = {
    where: ValidationLogScalarWhereInput
    data: XOR<ValidationLogUpdateManyMutationInput, ValidationLogUncheckedUpdateManyWithoutFormSubmissionInput>
  }

  export type ValidationLogScalarWhereInput = {
    AND?: ValidationLogScalarWhereInput | ValidationLogScalarWhereInput[]
    OR?: ValidationLogScalarWhereInput[]
    NOT?: ValidationLogScalarWhereInput | ValidationLogScalarWhereInput[]
    id?: StringFilter<"ValidationLog"> | string
    createdAt?: DateTimeFilter<"ValidationLog"> | Date | string
    fieldName?: StringFilter<"ValidationLog"> | string
    fieldValue?: StringFilter<"ValidationLog"> | string
    validationType?: StringFilter<"ValidationLog"> | string
    isValid?: BoolFilter<"ValidationLog"> | boolean
    errorMessage?: StringNullableFilter<"ValidationLog"> | string | null
    formSubmissionId?: StringNullableFilter<"ValidationLog"> | string | null
  }

  export type FormSubmissionCreateWithoutValidationLogsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    aadhaarNumber: string
    mobileNumber: string
    emailAddress: string
    otpVerified?: boolean
    panNumber: string
    businessName: string
    businessType: string
    addressLine1: string
    addressLine2?: string | null
    city: string
    state: string
    pincode: string
    status?: $Enums.FormStatus
    notes?: string | null
    validationErrors?: NullableJsonNullValueInput | InputJsonValue
  }

  export type FormSubmissionUncheckedCreateWithoutValidationLogsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    aadhaarNumber: string
    mobileNumber: string
    emailAddress: string
    otpVerified?: boolean
    panNumber: string
    businessName: string
    businessType: string
    addressLine1: string
    addressLine2?: string | null
    city: string
    state: string
    pincode: string
    status?: $Enums.FormStatus
    notes?: string | null
    validationErrors?: NullableJsonNullValueInput | InputJsonValue
  }

  export type FormSubmissionCreateOrConnectWithoutValidationLogsInput = {
    where: FormSubmissionWhereUniqueInput
    create: XOR<FormSubmissionCreateWithoutValidationLogsInput, FormSubmissionUncheckedCreateWithoutValidationLogsInput>
  }

  export type FormSubmissionUpsertWithoutValidationLogsInput = {
    update: XOR<FormSubmissionUpdateWithoutValidationLogsInput, FormSubmissionUncheckedUpdateWithoutValidationLogsInput>
    create: XOR<FormSubmissionCreateWithoutValidationLogsInput, FormSubmissionUncheckedCreateWithoutValidationLogsInput>
    where?: FormSubmissionWhereInput
  }

  export type FormSubmissionUpdateToOneWithWhereWithoutValidationLogsInput = {
    where?: FormSubmissionWhereInput
    data: XOR<FormSubmissionUpdateWithoutValidationLogsInput, FormSubmissionUncheckedUpdateWithoutValidationLogsInput>
  }

  export type FormSubmissionUpdateWithoutValidationLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aadhaarNumber?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    emailAddress?: StringFieldUpdateOperationsInput | string
    otpVerified?: BoolFieldUpdateOperationsInput | boolean
    panNumber?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    businessType?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    status?: EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    validationErrors?: NullableJsonNullValueInput | InputJsonValue
  }

  export type FormSubmissionUncheckedUpdateWithoutValidationLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aadhaarNumber?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    emailAddress?: StringFieldUpdateOperationsInput | string
    otpVerified?: BoolFieldUpdateOperationsInput | boolean
    panNumber?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    businessType?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    status?: EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    validationErrors?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ValidationLogCreateManyFormSubmissionInput = {
    id?: string
    createdAt?: Date | string
    fieldName: string
    fieldValue: string
    validationType: string
    isValid: boolean
    errorMessage?: string | null
  }

  export type ValidationLogUpdateWithoutFormSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldValue?: StringFieldUpdateOperationsInput | string
    validationType?: StringFieldUpdateOperationsInput | string
    isValid?: BoolFieldUpdateOperationsInput | boolean
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ValidationLogUncheckedUpdateWithoutFormSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldValue?: StringFieldUpdateOperationsInput | string
    validationType?: StringFieldUpdateOperationsInput | string
    isValid?: BoolFieldUpdateOperationsInput | boolean
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ValidationLogUncheckedUpdateManyWithoutFormSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldValue?: StringFieldUpdateOperationsInput | string
    validationType?: StringFieldUpdateOperationsInput | string
    isValid?: BoolFieldUpdateOperationsInput | boolean
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use FormSubmissionCountOutputTypeDefaultArgs instead
     */
    export type FormSubmissionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FormSubmissionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FormSubmissionDefaultArgs instead
     */
    export type FormSubmissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FormSubmissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ValidationLogDefaultArgs instead
     */
    export type ValidationLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ValidationLogDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}